//SJF Non-Preemptive

#include<stdio.h>
#include<stdlib.h>

int i=0,n;
typedef struct Process
{
int ID,AT,BT,CT,TT,WT;
}pro;

pro P[10];

void swap(int *b,int *c)
{
    int tem;
    tem=*c;
    *c=*b;
    *b=tem;
}

void main()
{
    int flag=0;
    float avgTT=0,avgWT=0;
    printf("Enter no of Process:\n");
    scanf("%d",&n);
    printf("Enter the arrival time and burst time:\n");

    for(i=0;i<n;i++)
    {
        P[i].ID=i+1;
        printf("Process P%d\n",i+1);
        printf("AT:");
        scanf("%d",&P[i].AT);
        printf("BT:");
        scanf("%d",&P[i].BT);
    }

    int sum=0;
    for(int i=0;i<n;i++)
        {
            for(int j=0;j<n-i-1;j++)
            {
                if(P[j].AT > P[j+1].AT)
                {
                      swap(&P[j+1].ID,&P[j].ID);
                      swap(&P[j+1].AT,&P[j].AT);
                      swap(&P[j+1].BT,&P[j].BT);
                }

            }
        }
    int cmp=0;
    i=0;
        int y=P[0].AT;
    for(int k=0;k<n;k++)
        {
            int min=P[k].BT;

            for(int j=k+1;j<n;j++)
            {
                if(min>P[j].BT && P[j].AT<=y)
                {
                      min=P[j].BT;
                      swap(&P[k].ID,&P[j].ID);
                      swap(&P[k].AT,&P[j].AT);
                      swap(&P[k].BT,&P[j].BT);
                }
            }
            if(P[k].AT>cmp)
                    cmp=cmp+P[k].BT+(P[k].AT-cmp);
                else
                    cmp=cmp+P[k].BT;
                P[k].CT=cmp;
                y=cmp;
        }

    printf("\n ID\t AT\t BT\t CT\t TT\t WT");
    for(i=0;i<n;i++)
    {
        P[i].TT=P[i].CT - P[i].AT;
        P[i].WT=P[i].TT - P[i].BT;
        avgTT+=P[i].TT;
        avgWT+=P[i].WT;
        printf("\n %d\t %d\t %d\t %d\t %d\t %d",P[i].ID,P[i].AT,P[i].BT,P[i].CT,P[i].TT,P[i].WT);
    }


    printf("\n avgTT=%f",(avgTT/n));
    printf("\n avgWT=%f",(avgWT/n));


    printf("\n");
    cmp=0;
    for(int i=0;i<n;i++)
    {
        if(P[i].AT<=cmp)
       {
           printf("|P%d(%d)",P[i].ID,P[i].BT);
            cmp+=P[i].BT;
        }
        else
        {
            printf("|XX(%d)",P[i].AT-cmp);
            cmp=P[i].AT;
            i--;
        }


    }
    printf("|\n0 ");
    cmp=0;
    for(int i=0;i<n;i++)
    {
        if(P[i].AT<=cmp)
        {
            printf("%d ",P[i].CT);
            cmp+=P[i].BT;
        }
        else{
            printf("%d ",P[i].AT);
            cmp=P[i].AT;
            i--;
        }

    }

}
