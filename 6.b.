/*
b. Write a program to generate first N ODD numbers with the following 
requirements: - Parent program should create a child and distribute the task of 
generating odd 
numbers to its child.
- The code for generating odd numbers should reside in different program.
- Child should write the odd numbers to a shared memory.
- Parent process has to print the odd numbers by retrieving from the shared 
memory.
i. Implement the above using shmget and shmat
Note: Shared object should be removed at the end in the program
*/


//Parent.c using shmget and shmmat
#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
int main(int argc, char *argv[])
{
        int i;
        pid_t pid;
        const int SIZE = 4096;
        int shmid;
        void *ptr;
        shmid = shmget((key_t) 11011, 4096, 0666 | IPC_CREAT);
        ptr = shmat(shmid, NULL, 0666);
        if (argc > 1)
        {
                sscanf(argv[1], "%d", &i);
                if (i < 0)
                {
                printf("Error input: %d\n", i);
                return 0;
                }
        }
        else
                return 1;
        pid = fork();
        if (pid == 0)
        {
                execlp("./odd", "odd", argv[1], NULL);
        }
        else if (pid > 0)
        {
                wait(NULL);
                printf("\nPARENT: child completed\n");
                printf("Parent printing:\n");
                printf("%s ", (char *)ptr);
                shmdt(ptr);
        }
        return 0;
}


//child.c
#include <sys/types.h>
#include <sys/wait.h>
#include <stdio.h>
#include <string.h>
#include <unistd.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <sys/mman.h>
#include <stdlib.h>
int main(int argc, char *argv[])
{
        int n = 1;
        void *ptr;
        int shmid = shmget((key_t) 11011, 4096, 0666);
        ptr = shmat(shmid, NULL, 0666);
        printf("CHILD:\n");
        int i = atoi(argv[1]);
        while (i)
        {
        sprintf(ptr, "%d ", n);
        printf("%d ", n);
        n+=2;
        i--;
        ptr += strlen(ptr);
        }
        shmctl(shmid, IPC_RMID, NULL);
        return 0;
}
