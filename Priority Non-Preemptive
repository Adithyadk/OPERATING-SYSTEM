#include<stdio.h>
#include<stdlib.h>
typedef struct process
{
        int ID,AT, BT, CT, WT, TT, PRI;
        int status;
}
pro;

pro P[10];

int n;
void AT_Sorting()
{
        struct process temp;
        int i, j;
        for (i = 0; i < n - 1; i++) {
                for (j = i + 1; j < n; j++) {
                        if (P[i].AT > P[j].AT) {
                                temp = P[i];
                                P[i] = P[j];
                                P[j] = temp;
                        }
                }
        }
}
void PRI_Sorting()
{
        struct process temp;
        int i, j;
        for (i = 0; i < n - 1; i++) {
                for (j = i + 1; j < n; j++) {
                        if (P[i].PRI < P[j].PRI) {
                                temp = P[i];
                                P[i] = P[j];
                                P[j] = temp;
                        }
                }
        }
}
void main()
{
        int i, time = 0, BT = 0, largest,cmp;
        float wait_time = 0, TT = 0, average_WT;
        float average_TT;
        printf("\nEnter Total Number of Processes:\t");
        scanf("%d", & n);

        //taking input process details
        for (i = 0; i < n; i++) {
                printf("\nEnter Details For Process[%d]:\n",(i+1));
                P[i].ID=(i+1);
                printf("Enter Arrival Time:\t");
                scanf("%d", & P[i].AT);
                printf("Enter Burst Time:\t");
                scanf("%d", & P[i].BT);
                printf("Enter PRI:\t");
                scanf("%d", & P[i].PRI);
                P[i].status = 0;
                BT = BT + P[i].BT;
        }
     AT_Sorting(); //sorting by arrival time
        P[9].PRI = -9999;
        
        for (time = P[0].AT; time < BT;) {
                largest = 9;
                for (i = 0; i < n; i++) {
                        if (P[i].AT <= time &&
                                P[i].status != 1 &&
                                P[i].PRI > P[largest].PRI) {
                                largest = i;
                        }
                }
                time = time + P[largest].BT;
                P[largest].CT = time;
                P[largest].WT =P[largest].CT - P[largest].AT -P[largest].BT;
                P[largest].TT =P[largest].CT - P[largest].AT;
                P[largest].status = 1;
                wait_time = wait_time + P[largest].WT;
                TT = TT + P[largest].TT;
        }
        
        printf("\nProcess Name\tArrival Time\tBurst Time\tPRI\tWaiting Time\tturnaround time");
        for(int i=0;i<n;i++)
        {
            printf("\n%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d", P[i].ID,P[i].AT, P[i].BT,P[i].PRI, P[i].WT, P[i].TT);
        }
        average_WT = wait_time / n; //cal avg waiting time
        average_TT = TT / n;
        printf("\n\nAverage waiting time:\t%f\n", average_WT);
        printf("Average Turnaround Time:\t%f\n", average_TT);
        printf("\n");
        PRI_Sorting();
        for(i=0;i<n;i++){
            printf("|P%d(%d)", P[i].ID, P[i].BT);
        }
        printf("\n");
        for(i=0;i<n;i++){
            printf("%d\t\t", P[i].CT);
        }
   
}
