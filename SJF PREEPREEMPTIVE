//SJF Preemptive : SRTF

#include <stdio.h>
#include <stdlib.h>
typedef struct Process {
    int ID, AT, BT, CT, TT, WT, RT;
} pro;

pro P[10];

void swap(int *b, int *c) {
    int tem;
    tem = *c;
    *c = *b;
    *b = tem;
}

void main() {
    int i = 0, n;
    float avgTT = 0, avgWT = 0;
    printf("Enter the number of processes:\n");
    scanf("%d", &n);
    printf("Enter the arrival time and burst time for each process:\n");

    for (i = 0; i < n; i++) {
        P[i].ID = i + 1;
        printf("Process P%d\n", i + 1);
        printf("AT:");
        scanf("%d", &P[i].AT);
        printf("BT:");
        scanf("%d", &P[i].BT);
        P[i].RT = P[i].BT;  
    }

    int cmp = 0, completed = 0, minRT, shortest = -1, tim;
    int flag = 0,rep=0;
    printf("Gantt Chart\n");
    printf("P%d(%d)\t",P[0].ID,0);
    for (tim = 0; completed != n; tim++) {
        minRT = -1;
        shortest = -1;
        for (i = 0; i < n; i++) {
            if (P[i].AT <= tim && P[i].RT > 0) {
                if (minRT == -1 || P[i].RT < minRT) {
                    minRT = P[i].RT;
                    shortest = i;
                    flag = 1;
                }
            }
        }
        if(rep!=shortest) printf("P%d(%d)\t",P[shortest].ID,tim);
        rep=shortest;
        P[shortest].RT--;
        P[shortest].CT = tim + 1;

        if (P[shortest].RT == 0) {
            completed++;
            P[shortest].TT = P[shortest].CT - P[shortest].AT;
            P[shortest].WT = P[shortest].TT - P[shortest].BT;
            avgTT += P[shortest].TT;
            avgWT += P[shortest].WT;
        }
    }

    printf("\n ID\t AT\t BT\t CT\t TT\t WT");
    for (i = 0; i < n; i++) {
        printf("\n %d\t %d\t %d\t %d\t %d\t %d", P[i].ID, P[i].AT, P[i].BT, P[i].CT, P[i].TT, P[i].WT);
    }

    printf("\n avgTT=%f", (avgTT / n));
    printf("\n avgWT=%f", (avgWT / n));

    printf("\n");
}
